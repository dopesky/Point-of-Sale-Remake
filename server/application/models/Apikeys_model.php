<?php
defined('BASEPATH') OR exit('No direct script access allowed');

class Apikeys_model extends MY_Model {

	function __construct() {
		parent::__construct();
	}

	function add_user($data) {
		$this->db->trans_start();
		$new_id = $this->db->insert('apikey_owners', $data) ? $this->db->insert_id() : false;
		if ($new_id) $this->api_activity_logs->add_log($new_id, 'Self Registered through the API Registration interface.');
		$this->db->trans_complete();
		return $this->db->trans_status() && $new_id ? $new_id : false;
	}

	function get_user_by_email($email) {
		return $this->db->select('*,apikey_owners.suspended as suspended,apikey_owners.owner_id as owner_id')->where('apikey_owners.owner_email', $email)->join('apikeys', 'apikey_owners.owner_id = apikeys.owner_id', 'left')->join('apikeypowers', 'apikeys.apikeypower_id = apikeypowers.apikeypower_id', 'left')->get('apikey_owners')->row();
	}

	function get_user_by_id($owner_id) {
		return $this->db->select('*,apikey_owners.suspended as suspended,apikey_owners.owner_id as owner_id')->where('apikey_owners.owner_id', $owner_id)->join('apikeys', 'apikey_owners.owner_id = apikeys.owner_id', 'left')->join('apikeypowers', 'apikeys.apikeypower_id = apikeypowers.apikeypower_id', 'left')->get('apikey_owners')->row();
	}

	function update_user_details($owner_id, $data) {
		if (is_array($data) && !array_key_exists('token_expire', $data)) $data['token_expire'] = 3600;
		return $this->db->where('owner_id', $owner_id)->update('apikey_owners', $data);
	}

	function get_user_keys($owner_id, $check_owner_suspended = true, $check_apikey_suspended = true) {
		$this->db->select('*,apikey_owners.suspended as suspended,apikey_owners.owner_id as owner_id,apikeys.suspended as key_suspended');
		$this->db->join('apikeys', 'apikey_owners.owner_id = apikeys.owner_id');
		$this->db->join('apikeypowers', 'apikeys.apikeypower_id = apikeypowers.apikeypower_id');
		$this->db->where('apikey_owners.owner_id', $owner_id);
		if ($check_owner_suspended) {
			$this->db->where('apikey_owners.suspended', 0);
		}
		if ($check_apikey_suspended) {
			$this->db->where('apikeys.suspended', 0);
		}
		return $this->db->get('apikey_owners')->result();
	}

	function add_api_key($owner_id, $scope, $apikey) {
		$apikey_power = $this->get_api_key_power_by_id($scope);
		if (!$apikey_power) return false;

		$data = array('apikey' => $apikey, 'owner_id' => $owner_id, 'apikeypower_id' => $scope);
		$this->db->trans_start();
		$new_id = $this->db->insert('apikeys', $data) ? $this->db->insert_id() : false;
		if ($new_id) $this->api_activity_logs->add_log($owner_id, "Registered new Autogenerated API Key through the API Keys Interface. API Key ID: $new_id. API Key Scope: {$apikey_power->apikey_power}");
		$this->db->trans_complete();
		return $this->db->trans_status() && $new_id ? $new_id : false;
	}

	function update_api_key($apikey_id, $data) {
		$apikey = $this->get_api_key_by_id($apikey_id, false);
		$apikey_power = $this->get_api_key_power_by_id($data['scope']);
		if (!$apikey || !$apikey_power) return false;

		$update = array('apikeypower_id' => $data['scope']);
		$this->db->trans_start();
		$result = $this->db->where('apikeys.apikey_id', $apikey_id)->where('apikeys.suspended', 0)->update('apikeys', $update);
		if ($result && $apikey_power->apikeypower_id !== $apikey->apikeypower_id) {
			$this->api_activity_logs->add_log($apikey->owner_id, "Updated Scope of API Key with ID $apikey_id from {$apikey->apikey_power} to {$apikey_power->apikey_power} through the API Keys Interface.");
		}
		$this->db->trans_complete();
		return $this->db->trans_status() && $result;
	}

	function delete_api_key($apikey_id) {
		$apikey = $this->get_api_key_by_id($apikey_id, false);
		if (!$apikey) return false;

		$this->db->trans_start();
		$result = $this->db->where('apikeys.apikey_id', $apikey_id)->where('apikeys.suspended', 0)->update('apikeys', array('apikeys.suspended' => 1));
		if ($result) $this->api_activity_logs->add_log($apikey->owner_id, "Deleted the API Key with ID $apikey_id through the API Keys Interface.");
		$this->db->trans_complete();
		return $this->db->trans_status() && $result;
	}

	function get_api_key_by_id($apikey_id, $check_owner_suspended = true, $check_apikey_suspended = true) {
		$this->db->select('*,apikey_owners.suspended as suspended,apikey_owners.owner_id as owner_id,apikeys.suspended as key_suspended');
		$this->db->join('apikey_owners', 'apikey_owners.owner_id = apikeys.owner_id');
		$this->db->join('apikeypowers', 'apikeypowers.apikeypower_id = apikeys.apikeypower_id');
		$this->db->where('apikeys.apikey_id', $apikey_id);
		if ($check_owner_suspended) {
			$this->db->where('apikey_owners.suspended', 0);
		}
		if ($check_apikey_suspended) {
			$this->db->where('apikeys.suspended', 0);
		}
		return $this->db->get('apikeys')->row();
	}

	function get_api_key_powers() {
		return $this->db->get('apikeypowers')->result();
	}

	function get_api_key($api_key) {
		$this->db->where('apikeys.apikey', $api_key);
		$this->db->where('apikeys.suspended', 0);
		$this->db->join('apikeypowers', 'apikeys.apikeypower_id = apikeypowers.apikeypower_id');
		return $this->db->get('apikeys')->row();
	}

	function get_api_key_power_by_id($apikeypower_id){
		return $this->db->get_where('apikeypowers', array('apikeypower_id' => $apikeypower_id))->row();
	}
}
